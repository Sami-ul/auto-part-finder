<script src="/js/vehicle-selector.js"></script> 
{{!-- above script for referencing vehicle csv data --}}
<main class="py-4 mx-5">
    <div class="mb-3 d-flex justify-content-between align-items-center">
        <h1>My Garage</h1>
        <button id="addVehicleBtn" class="btn btn-primary">Add Vehicle</button>
    </div>

    {{#if cars}}
    <div class="row g-4" id="carsContainer">
        {{#each cars}}
        <div class="col-md-4" id="car-{{this.id}}">
            <div class="card h-100 shadow-sm">
                <div class="card-header">
                    <h1 class="card-title" style="font-size: clamp(1rem, 2rem, 2rem);">{{this.year}} {{this.make}} {{this.model}}</h1>
                </div>
                <div class="card-body">
                    <table class="table">
                        <thead>
                            <tr class="text-start">
                                <th scope="col">Make:</th>
                                <td class="text-end">{{this.make}}</td>
                            </tr>
                            <tr class="text-start">
                                <th scope="col">Model:</th>
                                <td class="text-end">{{this.model}}</td>
                            </tr>
                            <tr class="text-start">
                                <th scope="col">Year:</th>
                                <td class="text-end">{{this.year}}</td>
                            </tr>
                            <tr class="text-start">
                                <th scope="col">Engine:</th>
                                <td class="text-end">{{this.engine}}</td>
                            </tr>
                            <tr class="text-start" hidden>
                                <th scope="col">Id: </th>
                                <td class="text-end">{{this.id}}</td>
                            </tr>
                        </thead>
                    </table>
                </div>
                <div class="card-footer text-end bg-transparent">
                    <button type="button" class="btn btn-primary edit-car-btn" data-bs-toggle="modal" data-bs-target="#carModal">
                        Edit
                    </button>
                    <button type="button" class="btn btn-danger delete-car-btn" data-bs-toggle="modal" data-bs-target="#deleteModal">
                        Delete
                    </button>
                </div>
            </div>
        </div>
        {{/each}}
    </div>
    {{else}}
    <div class="text-center py-5">
        <i class="bi bi-car-front" style="font-size: 4rem;"></i>
        <h2 class="mt-3">No vehicles in your garage</h2>
        <p class="text-muted">Add your first vehicle to get started!</p>
    </div>
    {{/if}}
</main>

<!-- Add Vehicle Modal -->
<div class="modal fade" id="addVehicleModal" tabindex="-1" aria-labelledby="addVehicleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addVehicleModalLabel">Add New Vehicle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addVehicleForm">
                    <div class="mb-3">
                        <select id="make" class="form-select" required>
                            <option value="">Select Make</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <select id="year" class="form-select" required disabled>
                            <option value="">Select Year</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <select id="model" class="form-select" required disabled>
                            <option value="">Select Model</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <select id="engine" class="form-select" required disabled>
                            <option value="">Select Engine</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveVehicle">Add Vehicle</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="carModal" tabindex="-1" aria-labelledby="carModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="carModalLabel">Edit Vehicle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editVehicleForm">
                    <div class="mb-3">
                        <select id="editMake" class="form-select" required>
                            <option value="">Select Make</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <select id="editYear" class="form-select" required disabled>
                            <option value="">Select Year</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <select id="editModel" class="form-select" required disabled>
                            <option value="">Select Model</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <select id="editEngine" class="form-select" required disabled>
                            <option value="">Select Engine</option>
                        </select>
                    </div>
                    <input type="hidden" id="editCarId">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveChanges">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete a modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">Are you sure you want to delete this vehicle?</div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">No</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Yes</button>
            </div>
        </div>
    </div>
</div>

<script>
    let vehicleData = [];

    // Load vehicle data when the page loads
    document.addEventListener('DOMContentLoaded', async function() {
        try {
            const response = await fetch('/vehicle-data');
            const data = await response.json();
            
            // Convert the data into the expected format if it's not already
            vehicleData = Array.isArray(data) ? data : Object.values(data);
            
            // Initialize dropdowns for both add and edit forms
            initializeDropdowns('make', 'year', 'model', 'engine');
            initializeDropdowns('editMake', 'editYear', 'editModel', 'editEngine');
        } catch (error) {
            console.error('Error loading vehicle data:', error);
            alert('Failed to load vehicle data. Please refresh the page.');
        }
    });

    function initializeDropdowns(makeId, yearId, modelId, engineId) {
        const makeSelect = document.getElementById(makeId);
        const yearSelect = document.getElementById(yearId);
        const modelSelect = document.getElementById(modelId);
        const engineSelect = document.getElementById(engineId);

        // Reset and disable all dropdowns except make
        yearSelect.innerHTML = '<option value="">Select Year</option>';
        modelSelect.innerHTML = '<option value="">Select Model</option>';
        engineSelect.innerHTML = '<option value="">Select Engine</option>';
        
        yearSelect.disabled = true;
        modelSelect.disabled = true;
        engineSelect.disabled = true;

        // Populate make dropdown
        const uniqueMakes = [...new Set(vehicleData.map(row => row[0]))].sort();
        makeSelect.innerHTML = '<option value="">Select Make</option>';
        uniqueMakes.forEach(make => {
            if (make && make.trim()) {
                makeSelect.innerHTML += `<option value="${make}">${make}</option>`;
            }
        });

        // Add event listeners
        makeSelect.addEventListener('change', function() {
            updateYearDropdown(this.value, yearSelect, modelSelect, engineSelect);
        });

        yearSelect.addEventListener('change', function() {
            updateModelDropdown(makeSelect.value, this.value, modelSelect, engineSelect);
        });

        modelSelect.addEventListener('change', function() {
            updateEngineDropdown(makeSelect.value, yearSelect.value, this.value, engineSelect);
        });
    }

    function updateYearDropdown(selectedMake, yearSelect, modelSelect, engineSelect) {
        yearSelect.innerHTML = '<option value="">Select Year</option>';
        modelSelect.innerHTML = '<option value="">Select Model</option>';
        engineSelect.innerHTML = '<option value="">Select Engine</option>';
        
        if (!selectedMake) {
            yearSelect.disabled = true;
            modelSelect.disabled = true;
            engineSelect.disabled = true;
            return;
        }

        const years = [...new Set(vehicleData
            .filter(row => row[0] === selectedMake)
            .map(row => row[1]))
        ].sort((a, b) => b - a);

        years.forEach(year => {
            yearSelect.innerHTML += `<option value="${year}">${year}</option>`;
        });

        yearSelect.disabled = false;
        modelSelect.disabled = true;
        engineSelect.disabled = true;
    }

    function updateModelDropdown(selectedMake, selectedYear, modelSelect, engineSelect) {
        modelSelect.innerHTML = '<option value="">Select Model</option>';
        engineSelect.innerHTML = '<option value="">Select Engine</option>';

        if (!selectedMake || !selectedYear) {
            modelSelect.disabled = true;
            engineSelect.disabled = true;
            return;
        }

        const models = [...new Set(vehicleData
            .filter(row => row[0] === selectedMake && row[1] === parseInt(selectedYear))
            .map(row => row[2]))
        ].sort();

        models.forEach(model => {
            modelSelect.innerHTML += `<option value="${model}">${model}</option>`;
        });

        modelSelect.disabled = false;
        engineSelect.disabled = true;
    }

    function updateEngineDropdown(selectedMake, selectedYear, selectedModel, engineSelect) {
        engineSelect.innerHTML = '<option value="">Select Engine</option>';

        if (!selectedMake || !selectedYear || !selectedModel) {
            engineSelect.disabled = true;
            return;
        }

        const engines = [...new Set(vehicleData
            .filter(row => 
                row[0] === selectedMake && 
                row[1] === parseInt(selectedYear) && 
                row[2] === selectedModel
            )
            .map(row => row[3]))
        ].sort();

        engines.forEach(engine => {
            engineSelect.innerHTML += `<option value="${engine}">${engine}</option>`;
        });

        engineSelect.disabled = false;
    }

    // Show the modal
    document.getElementById('addVehicleBtn').addEventListener('click', function() {
        // Reset and reinitialize dropdowns when opening the add modal
        initializeDropdowns('make', 'year', 'model', 'engine');
        const modal = new bootstrap.Modal(document.getElementById('addVehicleModal'));
        modal.show();
    });

    // Save vehicle handler
    document.getElementById('saveVehicle').addEventListener('click', function() {
        const year = document.getElementById('year').value;
        const make = document.getElementById('make').value;
        const model = document.getElementById('model').value;
        const engine = document.getElementById('engine').value;

        if (!year || !make || !model || !engine) {
            alert('Please fill in all fields');
            return;
        }

        fetch('/api/vehicles', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ year, make, model, engine })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                window.location.reload();
            } else {
                alert('Failed to add vehicle');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to add vehicle');
        });
    });

    // For deleting modal
    let cardToDelete = null;

    // When delete button is clicked, store the card reference
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('delete-car-btn')) {
            cardToDelete = e.target.closest('.col-md-4');
            const userCarId = cardToDelete.querySelector('tr:nth-child(5) td').textContent.trim();
            console.log('Preparing to delete car with ID:', userCarId);
        }
    });

    // When confirm delete is clicked in the modal
    document.getElementById('confirmDelete').addEventListener('click', function() {
        if (!cardToDelete) {
            console.error('No card selected for deletion');
            return;
        }

        const userCarId = cardToDelete.querySelector('tr:nth-child(5) td').textContent.trim();
        
        fetch(`/api/vehicles/${userCarId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => Promise.reject(err));
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                // Remove the card from the DOM
                cardToDelete.remove();
                
                // Close the modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('deleteModal'));
                modal.hide();

                // Check if any cards remain
                const container = document.getElementById('carsContainer');
                if (container && container.children.length === 0) {
                    container.remove();
                    const mainContent = document.querySelector('main');
                    const emptyState = document.createElement('div');
                    emptyState.className = 'text-center py-5';
                    emptyState.innerHTML = `
                        <i class="bi bi-car-front" style="font-size: 4rem;"></i>
                        <h2 class="mt-3">No vehicles in your garage</h2>
                        <p class="text-muted">Add your first vehicle to get started!</p>
                    `;
                    
                    // Insert the empty state after the header section
                    const headerSection = mainContent.querySelector('.mb-3.d-flex');
                    headerSection.insertAdjacentElement('afterend', emptyState);
                }
            } else {
                throw new Error(data.error || 'Failed to delete vehicle');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert(error.message || 'Failed to delete vehicle');
        })
        .finally(() => {
            cardToDelete = null;
        });
    });

    let currentEditCard = null;

    // Populates the "edit" form when editing an already saved car
    document.addEventListener('DOMContentLoaded', function() {
        const addYear = document.querySelector('#year');
        const addMake = document.querySelector('#make');
        const addModel = document.querySelector('#model');
        const addEngine = document.querySelector('#engine');

        document.querySelector('#editYear').innerHTML = addYear.innerHTML;
        document.querySelector('#editMake').innerHTML = addMake.innerHTML;
        document.querySelector('#editModel').innerHTML = addModel.innerHTML;
        document.querySelector('#editEngine').innerHTML = addEngine.innerHTML;
    });

    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('edit-car-btn')) {
            currentEditCard = e.target.closest('.card');
            
            // Get current values from the card
            const make = currentEditCard.querySelector('tr:nth-child(1) td').textContent;
            const model = currentEditCard.querySelector('tr:nth-child(2) td').textContent;
            const year = currentEditCard.querySelector('tr:nth-child(3) td').textContent;
            const engine = currentEditCard.querySelector('tr:nth-child(4) td').textContent;
            const userCarId = currentEditCard.querySelector('tr:nth-child(5) td').textContent;
            
            // Set the make first and trigger its change event
            const editMakeSelect = document.getElementById('editMake');
            editMakeSelect.value = make;
            editMakeSelect.dispatchEvent(new Event('change'));

            // Short delay to allow for year dropdown to populate
            setTimeout(() => {
                // Set the year and trigger its change event
                const editYearSelect = document.getElementById('editYear');
                editYearSelect.value = year;
                editYearSelect.dispatchEvent(new Event('change'));

                // Short delay to allow for model dropdown to populate
                setTimeout(() => {
                    // Set the model and trigger its change event
                    const editModelSelect = document.getElementById('editModel');
                    editModelSelect.value = model;
                    editModelSelect.dispatchEvent(new Event('change'));

                    // Short delay to allow for engine dropdown to populate
                    setTimeout(() => {
                        // Set the engine
                        const editEngineSelect = document.getElementById('editEngine');
                        editEngineSelect.value = engine;
                    }, 100);
                }, 100);
            }, 100);

            // Store the car ID
            document.getElementById('editCarId').value = userCarId;
        }
    });

    // Make sure the edit form dropdowns are properly initialized
    function initializeEditForm() {
        const editMakeSelect = document.getElementById('editMake');
        const editYearSelect = document.getElementById('editYear');
        const editModelSelect = document.getElementById('editModel');
        const editEngineSelect = document.getElementById('editEngine');

        // Enable all dropdowns initially
        editYearSelect.disabled = false;
        editModelSelect.disabled = false;
        editEngineSelect.disabled = false;

        // Add event listeners for the edit form dropdowns
        editMakeSelect.addEventListener('change', function() {
            updateYearDropdown(this.value, editYearSelect, editModelSelect, editEngineSelect);
        });

        editYearSelect.addEventListener('change', function() {
            updateModelDropdown(editMakeSelect.value, this.value, editModelSelect, editEngineSelect);
        });

        editModelSelect.addEventListener('change', function() {
            updateEngineDropdown(editMakeSelect.value, editYearSelect.value, this.value, editEngineSelect);
        });
    }

    // Saves any changes made
    document.getElementById('saveChanges').addEventListener('click', function() {
        if (!currentEditCard) return;

        const year = document.getElementById('editYear').value;
        const make = document.getElementById('editMake').value;
        const model = document.getElementById('editModel').value;
        const engine = document.getElementById('editEngine').value;
        const userCarId = document.getElementById('editCarId').value;
        // Extract ID from the card's parent div id (format: "car-123")
        const carId = currentEditCard.closest('.col-md-4').id.split('-')[1];

        console.log('Updating vehicle with ID:', userCarId); // Debug log

        if (!year || !make || !model || !engine || !userCarId) {
            alert('Please fill in all fields');
            return;
        }

        fetch(`/api/vehicles/${userCarId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ year, make, model, engine})
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update the card content
                currentEditCard.querySelector('.card-title').textContent = `${year} ${make} ${model}`;
                currentEditCard.querySelector('tr:nth-child(1) td').textContent = make;
                currentEditCard.querySelector('tr:nth-child(2) td').textContent = model;
                currentEditCard.querySelector('tr:nth-child(3) td').textContent = year;
                currentEditCard.querySelector('tr:nth-child(4) td').textContent = engine;

                // Close the modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('carModal'));
                modal.hide();

                // Reset the form
                document.getElementById('editVehicleForm').reset();
                currentEditCard = null;
            } else {
                alert('Failed to update vehicle');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to update vehicle');
        });
    });
</script>
