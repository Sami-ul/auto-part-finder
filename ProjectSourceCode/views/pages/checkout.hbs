<main>
    <div class="row justify-content-between">
        <div class="col-5 py-4 mb-5">
            <h1>Checkout</h1>

            <form class="py-4" id="checkout-info-form">
                <h3>Contact</h3>
                <div class="input-group">
                    <div class="form-floating my-2">
                        <input id="firstNameLabel" type="text" class="form-control" placeholder="firstName" required>
                        <label for="firstNameLabel">First name</label>
                    </div>
                    <div class="form-floating my-2">
                        <input id="lastNameLabel" type="text" class="form-control" placeholder="lastName" required>
                        <label for="lastNameLabel">Last name</label>
                    </div>
                </div>

                <div class="form-floating my-3">
                    <input type="email" class="form-control" id="checkoutEmail" placeholder="email" required>
                    <label for="checkoutEmail">Email address</label>
                </div>

                {{!-- Delivery --}}
                <h3 class="mt-5 mb-3">Delivery</h3>

                <select class="form-select mb-3" id="addressSelect" aria-label="Default select example" required> 
                    {{#if addresses.length}}
                        {{#each addresses}}
                        <option value="{{this.id}}" {{#if this.is_default}}selected{{/if}}>{{this.street_address}}, {{this.city}}, {{this.state}}{{#if this.is_default}} (default){{/if}}</option>
                        {{/each}}
                    {{else}}
                        <option value="" selected disabled>Add your first address for checkout</option>
                    {{/if}}
                </select>
                <div class="d-grid">
                    <button type="button" class="btn btn-primary" onclick="location.href='/address'">
                        Add new address
                    </button>
                </div>
            

                {{!-- Shipping --}}
                <h3 class="mt-5 mb-3">Shipping</h3>
                <ul class="list-group mb-3">
                    <li class="list-group-item">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="shippingType" id="econInput" value="Economy" checked required>
                            <label class="form-check-label" for="econInput">
                                <h5 class="mx-2">Economy</h5>
                                <small class="text-muted mx-2">Ships in 5-7 business days</small>
                            </label>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="shippingType" id="expressInput" value="Express">
                            <label class="form-check-label" for="expressInput">
                                <h5 class="mx-2">Express</h5>
                                <small class="text-muted mx-2">Ships in 1-3 business days</small>
                            </label>
                        </div>
                    </li>
                </ul>

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary">Continue to payment</button>
                </div>
            </form>

        </div>

        {{!-- Cart --}}
        <div class="col-4 py-4 mb-5">
            <h2 class="d-flex justify-content-between align-items-center mb-3">
                <span class="text-muted">Your Cart</span>
                <span class="badge text-bg-secondary rounded-pill">{{amtItems}}</span>
            </h2>
            {{#if hasItems}}
            <ul class="list-group mb-3">
                {{#each cartItems}}
                <li class="list-group-item d-flex justify-content-between">
                    <span>
                        <h5 class="my-0">{{this.name}}</h5>
                        <small class="text-muted">{{this.description}}</small>
                    </span>
                    <h6><strong>${{this.price}}</strong></h6>
                </li>
                {{/each}}
            {{/if}}

            <li class="list-group-item d-flex justify-content-between">
                <span>
                    <h5>Shipping</h5>
                    <small class="text-muted" id="shippingTypeDisplay">Economy (5-7 business days)</small>
                </span>
                <h6><strong id="shippingPrice">$5</strong></h6>
            </li>
            <li class="list-group-item d-flex justify-content-between p-4">
                <span>
                    <h4>Total (USD)</h4>
                </span>
                <h5><strong id="totalPrice">${{cartSum}}</strong></h5>
            </li>
            </ul>
        </div>
    </div>

    <!-- Payment Section -->
    <div class="row justify-content-center mt-3 mb-5" id="payment-container">
        <div class="col-6">
            <form id="payment-form" style="display: none;">
                <div id="payment-element">
                    <!--Stripe.js injects the Payment Element-->
                </div>
                <button id="submit" class="btn btn-primary w-100 mt-3">
                    <span id="button-text">Pay now</span>
                </button>
                <div id="payment-message" class="text-danger mt-2 hidden"></div>
            </form>
        </div>
    </div>
</main>

<script src="https://js.stripe.com/basil/stripe.js"></script>
<script>
    const economyRadio = document.getElementById('econInput');
    const expressRadio = document.getElementById('expressInput');
    const shippingPriceDisplay = document.getElementById('shippingPrice');
    const totalPriceDisplay = document.getElementById('totalPrice');
    const shippingTypeDisplay = document.getElementById('shippingTypeDisplay');
    const paymentForm = document.getElementById('payment-form');
    
    if (paymentForm) {
        paymentForm.style.display = 'none';
    }
    
    const basePrice = {{cartSum}};
    const economyPrice = 5;
    const expressPrice = 20;
    let totalAmount = basePrice + economyPrice; // Default to economy shipping
    
    function updatePrices() {
        let shippingPrice = 0;
        let shippingType = '';
        
        if (economyRadio.checked) {
            shippingPrice = economyPrice;
            shippingType = 'Economy (5-7 business days)';
            totalAmount = basePrice + economyPrice;
        } else if (expressRadio.checked) {
            shippingPrice = expressPrice;
            shippingType = 'Express (1-3 business days)';
            totalAmount = basePrice + expressPrice;
        }
        
        shippingPriceDisplay.textContent = `$${shippingPrice}`;
        totalPriceDisplay.textContent = `$${totalAmount.toFixed(2)}`;
        shippingTypeDisplay.textContent = shippingType;
    }
    
    economyRadio.addEventListener('change', updatePrices);
    expressRadio.addEventListener('change', updatePrices);
    
    updatePrices();
    
    document.querySelector('form').addEventListener('submit', function(event) {
        event.preventDefault();
        
        const firstName = document.getElementById('firstNameLabel').value;
        const email = document.getElementById('checkoutEmail').value;
        const addressSelect = document.getElementById('addressSelect').value;
        const shippingType = document.querySelector('input[name="shippingType"]:checked');
        
        if (!firstName || !email || (!addressSelect && addressSelect !== 0) || !shippingType) {
            alert('Please fill out all required fields.');
            return;
        }
        
        if (paymentForm) {
            paymentForm.style.display = 'block';
            
            this.querySelector('button[type="submit"]').style.display = 'none';
            
            paymentForm.scrollIntoView({ behavior: 'smooth' });
            
            initializeStripeCheckout();
        }
    });
    
    const stripe = Stripe(`{{stripePublishableKey}}`);
    let checkout;
    
    async function initializeStripeCheckout() {
        document.querySelector("#button-text").textContent = "Loading...";
        
        const fetchClientSecret = () => {
            const shippingType = document.querySelector('input[name="shippingType"]:checked').value;
            
            const description = `Auto Parts Order with ${shippingType} Shipping`;
            
            return fetch("/create-checkout-session", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    amount: totalAmount,
                    description: description
                })
            })
            .then((r) => r.json())
            .then((r) => {
                if (r.error) {
                    throw new Error(r.error);
                }
                return r.clientSecret;
            });
        };
        
        const appearance = {
            theme: 'stripe',
        };
        
        try {
            checkout = await stripe.initCheckout({
                fetchClientSecret,
                elementsOptions: { appearance },
            });
            
            document.querySelector("#button-text").textContent = `Pay $${totalAmount.toFixed(2)} now`;
            
            const paymentElement = checkout.createPaymentElement();
            paymentElement.mount("#payment-element");
        } catch (error) {
            console.error('Error initializing checkout:', error);
            document.querySelector("#payment-message").textContent = error.message;
            document.querySelector("#payment-message").classList.remove("hidden");
        }
    }
    
    document.querySelector("#payment-form").addEventListener("submit", handleSubmit);
    
    async function handleSubmit(e) {
        e.preventDefault();
        
        try {
            const { error } = await checkout.confirm();
            
            if (error) {
                showMessage(error.message);
            }
        } catch (error) {
            console.error('Error confirming payment:', error);
            showMessage("An unexpected error occurred. Please try again.");
        }
        
        setLoading(false);
    }
    
    function showMessage(messageText) {
        const messageContainer = document.querySelector("#payment-message");
        
        messageContainer.classList.remove("hidden");
        messageContainer.textContent = messageText;
        
        setTimeout(function () {
            messageContainer.classList.add("hidden");
            messageContainer.textContent = "";
        }, 4000);
    }
</script>