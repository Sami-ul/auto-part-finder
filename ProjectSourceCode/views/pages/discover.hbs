<style>
.choose-vehicle {
    max-width: 200px; /* or whatever width you prefer */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    text-align: left;
}
</style>

<main>
    <div class="search-container">
        <button id="chooseVehicle" class="choose-vehicle">
            Choose Vehicle
        </button>
        <input type="text" class="search-input" value="{{searchQuery}}" placeholder="Search for parts..." />
        {{#if searchQuery}}
            <button class="clear-search" title="Clear search">Ã—</button>
        {{/if}}
        <button class="search-button">Search</button>
    </div>
    <div class="under-search-container">
        <div class="product-filters">
            <label for="min-input">Price Min $</label>
            <input type="number" id="min-input" name="pricemin" class="min-price" value="{{priceMin}}" placeholder="0">
            <label class="max-input-label" for="max-input">Price Max $</label>
            <input type="number" id="max-input" name="pricemax" class="max-price" value="{{priceMax}}" placeholder="Any">
        </div>
    </div>

    <script>
        const minPriceInput = document.getElementById('min-input');
        const maxPriceInput = document.getElementById('max-input');

        function validatePrices() {
            const minInput = minPriceInput;
            const maxInput = maxPriceInput;

            let minString = minInput.value;
            let maxString = maxInput.value;

            if (parseFloat(minString) < 0) {
                minInput.value = 0;
                minString = '0';
            }
            if (parseFloat(maxString) < 0) {
                maxInput.value = 0;
                maxString = '0';
            }

            let minVal = parseFloat(minString);
            let maxVal = parseFloat(maxString);

            if (!isNaN(minVal) && !isNaN(maxVal) && minVal > maxVal) {
                minInput.value = maxString;
            }
        }

        minPriceInput.addEventListener('input', validatePrices);
        maxPriceInput.addEventListener('input', validatePrices);

    </script>
   

    <div class="overlay" id="overlay"></div>
    {{!-- Needs filtering model based on make, engine based on make and model --}}
    <div class="popup" id="vehiclePopup">
        <button id="closePopup" class="close-btn">&times;</button>
        <div class="popup-header">
            <h2>Choose a Vehicle</h2>
        </div>
        <div class="modal-body">
            {{#if userVehicles}}
                <div class="mb-3">
                    <label for="savedVehicles" class="form-label">My Vehicles</label>
                    <select id="savedVehicles" class="form-select mb-3">
                        <option value="">Select from your garage</option>
                        {{#each userVehicles}}
                            <option value="{{this.year}}|{{this.make}}|{{this.model}}|{{this.engine}}">{{this.year}} {{this.model}}, {{this.engine}}</option>
                        {{/each}}
                    </select>
                </div>
            {{/if}}
            
            <form id="vehicleSelectForm">
                <div class="mb-3">
                    <select id="make" class="form-select" required>
                        <option value="">Select Make</option>
                    </select>
                </div>
                <div class="mb-3">
                    <select id="year" class="form-select" required disabled>
                        <option value="">Select Year</option>
                    </select>
                </div>
                <div class="mb-3">
                    <select id="model" class="form-select" required disabled>
                        <option value="">Select Model</option>
                    </select>
                </div>
                <div class="mb-3">
                    <select id="engine" class="form-select" required disabled>
                        <option value="">Select Engine</option>
                    </select>
                </div>
            </form>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-danger" id="clearVehicle">Clear</button>
            <button type="button" class="btn btn-primary" id="addVehicle">Select</button>
        </div>
    </div>

    <script>
        function getCookie(name) {
        if (typeof document === 'undefined' || !document.cookie) {
            return null;
        }
        const nameEQ = name + "=";
        const ca = document.cookie.split(';');
        for(let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) === ' ') {
                c = c.substring(1, c.length);
            }
            if (c.indexOf(nameEQ) === 0) {
                const value = c.substring(nameEQ.length, c.length);
                try {
                    return decodeURIComponent(value);
                } catch (e) {
                    return value;
                }
            }
        }
            return null;
        }
        document.addEventListener('DOMContentLoaded', async function() {
        // First, verify all required elements exist
        const makeSelect = document.getElementById('make');
        const yearSelect = document.getElementById('year');
        const modelSelect = document.getElementById('model');
        const engineSelect = document.getElementById('engine');
        const chooseVehicleBtn = document.getElementById('chooseVehicle');
        const vehiclePopup = document.getElementById('vehiclePopup');
        const closePopupBtn = document.getElementById('closePopup');
        const clearVehicleBtn = document.getElementById('clearVehicle');
        const addVehicleBtn = document.getElementById('addVehicle');
        const overlay = document.getElementById('overlay');

        // Check if all required elements exist
        if (!makeSelect || !yearSelect || !modelSelect || !engineSelect || 
            !chooseVehicleBtn || !vehiclePopup || !closePopupBtn || 
            !clearVehicleBtn || !addVehicleBtn || !overlay) {
            console.error('Required DOM elements not found');
            return;
        }

        try {
            // Load vehicle data
            const vehicleCookie = 'currentVehicle';
            const response = await fetch('/vehicle-data');
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            
            if (!data || !Array.isArray(data) || data.length === 0) {
                throw new Error('Invalid vehicle data received');
            }
            
            vehicleData = Array.isArray(data) ? data : Object.values(data);

            // Populate initial make dropdown
            const uniqueMakes = [...new Set(vehicleData.map(row => row[0]))].sort();
            makeSelect.innerHTML = '<option value="">Select Make</option>';
            uniqueMakes.forEach(make => {
                if (make && make.trim()) {
                    makeSelect.innerHTML += `<option value="${make}">${make}</option>`;
                }
            });

            // Add event listeners
            makeSelect.addEventListener('change', function() {
                updateDropdowns('year', this.value);
            });

            yearSelect.addEventListener('change', function() {
                updateDropdowns('model', makeSelect.value, this.value);
            });

            modelSelect.addEventListener('change', function() {
                updateDropdowns('engine', makeSelect.value, yearSelect.value, this.value);
            });

            // Open popup

            chooseVehicleBtn.addEventListener('click', function() {
                vehiclePopup.classList.add('active');
                overlay.classList.add('active');
                const vehicleCookieValue = getCookie(vehicleCookie);

                makeSelect.value = '';
                yearSelect.innerHTML = '<option value="">Select Year</option>';
                modelSelect.innerHTML = '<option value="">Select Model</option>';
                engineSelect.innerHTML = '<option value="">Select Engine</option>';
                yearSelect.disabled = true;
                modelSelect.disabled = true;
                engineSelect.disabled = true;

                if (vehicleCookieValue) {
                    try {
                        const vehicleDataFromCookie = JSON.parse(vehicleCookieValue);

                        if (vehicleDataFromCookie && typeof vehicleDataFromCookie === 'object') {

                            if (vehicleDataFromCookie.make) {
                                makeSelect.value = vehicleDataFromCookie.make;
                                updateDropdowns('year', vehicleDataFromCookie.make);
                            }

                            if (vehicleDataFromCookie.year && makeSelect.value) {
                                yearSelect.value = vehicleDataFromCookie.year;
                                updateDropdowns('model', vehicleDataFromCookie.make, vehicleDataFromCookie.year);
                            }

                            if (vehicleDataFromCookie.model && yearSelect.value) {
                                modelSelect.value = vehicleDataFromCookie.model;
                                updateDropdowns('engine', vehicleDataFromCookie.make, vehicleDataFromCookie.year, vehicleDataFromCookie.model);
                            }

                            if (vehicleDataFromCookie.engine && modelSelect.value) {
                                engineSelect.value = vehicleDataFromCookie.engine;
                            }

                            yearSelect.disabled = !yearSelect.value && !vehicleDataFromCookie.year;
                            modelSelect.disabled = !modelSelect.value && !vehicleDataFromCookie.model;
                            engineSelect.disabled = !engineSelect.value && !vehicleDataFromCookie.engine;

                        }
                    } catch (error) {
                        console.error('Error processing vehicle cookie on popup open:', error);
                        makeSelect.value = '';
                        yearSelect.innerHTML = '<option value="">Select Year</option>';
                        modelSelect.innerHTML = '<option value="">Select Model</option>';
                        engineSelect.innerHTML = '<option value="">Select Engine</option>';
                        yearSelect.disabled = true;
                        modelSelect.disabled = true;
                        engineSelect.disabled = true;
                    }
                }
            });

            // Close popup
            closePopupBtn.addEventListener('click', closePopup);
            
            // Clear vehicle
            clearVehicleBtn.addEventListener('click', function() {
                makeSelect.value = '';
                yearSelect.value = '';
                modelSelect.value = '';
                engineSelect.value = '';
                yearSelect.disabled = true;
                modelSelect.disabled = true;
                engineSelect.disabled = true;
                
                // Reset the button text
                const chooseVehicleBtn = document.getElementById('chooseVehicle');
                chooseVehicleBtn.textContent = 'Choose Vehicle';
                
                document.cookie = `${vehicleCookie}=; Max-Age=-99999`;
                closePopup();
                window.location.reload();
            });

            // Add vehicle
            addVehicleBtn.addEventListener('click', function() {
                const year = yearSelect.value;
                const make = makeSelect.value;
                const model = modelSelect.value;
                const engine = engineSelect.value;
                if (!year || !make || !model || !engine) {
                    alert('Please fill in all fields');
                    return;
                }
                const vehicle = {
                    make: make,
                    year: year,
                    model: model,
                    engine: engine
                };
                
                // Update the button text
                const chooseVehicleBtn = document.getElementById('chooseVehicle');
                chooseVehicleBtn.textContent = `${year} ${make} ${model} ${engine}`;
                
                const cookieBody = encodeURIComponent(JSON.stringify(vehicle));
                const cookieName = "currentVehicle";
                document.cookie = `${cookieName}=${cookieBody}; Max-Age=3600`;
                closePopup();
                window.location.reload();
            });
        } catch (error) {
            console.error('Error loading vehicle data:', error);
            alert(`Failed to load vehicle data: ${error.message}. Please try again later. Received data: ${JSON.stringify(data)}`);
        }
    });

    function closePopup() {
        const vehiclePopup = document.getElementById('vehiclePopup');
        const overlay = document.getElementById('overlay');
        if (vehiclePopup && overlay) {
            vehiclePopup.classList.remove('active');
            overlay.classList.remove('active');
        }
    }

    function updateDropdowns(type, make, year, model) {
        const yearSelect = document.getElementById('year');
        const modelSelect = document.getElementById('model');
        const engineSelect = document.getElementById('engine');

        switch(type) {
            case 'year':
                yearSelect.innerHTML = '<option value="">Select Year</option>';
                modelSelect.innerHTML = '<option value="">Select Model</option>';
                engineSelect.innerHTML = '<option value="">Select Engine</option>';
                
                if (!make) {
                    yearSelect.disabled = true;
                    modelSelect.disabled = true;
                    engineSelect.disabled = true;
                    return;
                }

                const years = [...new Set(vehicleData
                    .filter(row => row[0] === make)
                    .map(row => row[1]))
                ].sort((a, b) => b - a);

                years.forEach(year => {
                    yearSelect.innerHTML += `<option value="${year}">${year}</option>`;
                });

                yearSelect.disabled = false;
                modelSelect.disabled = true;
                engineSelect.disabled = true;
                break;

            case 'model':
                modelSelect.innerHTML = '<option value="">Select Model</option>';
                engineSelect.innerHTML = '<option value="">Select Engine</option>';

                if (!make || !year) {
                    modelSelect.disabled = true;
                    engineSelect.disabled = true;
                    return;
                }

                const models = [...new Set(vehicleData
                    .filter(row => row[0] === make && row[1] === parseInt(year))
                    .map(row => row[2]))
                ].sort();

                models.forEach(model => {
                    modelSelect.innerHTML += `<option value="${model}">${model}</option>`;
                });

                modelSelect.disabled = false;
                engineSelect.disabled = true;
                break;

            case 'engine':
                engineSelect.innerHTML = '<option value="">Select Engine</option>';

                if (!make || !year || !model) {
                    engineSelect.disabled = true;
                    return;
                }

                const engines = [...new Set(vehicleData
                    .filter(row => 
                        row[0] === make && 
                        row[1] === parseInt(year) && 
                        row[2] === model
                    )
                    .map(row => row[3]))
                ].sort();

                engines.forEach(engine => {
                    engineSelect.innerHTML += `<option value="${engine}">${engine}</option>`;
                });

                engineSelect.disabled = false;
                break;
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        const searchInput = document.querySelector('.search-input');
        const searchButton = document.querySelector('.search-button');
        const clearButton = document.querySelector('.clear-search');
        const priceMin = document.querySelector('.min-price');
        const priceMax = document.querySelector('.max-price');

        // Function to handle search
        function performSearch() {
            const searchValue = searchInput.value.trim();
            const priceMinValue = priceMin.value.trim();
            const priceMaxValue = priceMax.value.trim();
            let query;
            if (searchValue) {
                query = `/search?query=${encodeURIComponent(searchValue)}`;
            }
            if (priceMinValue) {
                query = query + `&pricemin=${encodeURIComponent(priceMinValue)}`;
            }
            if (priceMaxValue) {
                query = query + `&pricemax=${encodeURIComponent(priceMaxValue)}`;
            }
            if (searchValue && query) window.location.href = query;
        }


        // Handle click on search button
        searchButton.addEventListener('click', performSearch);

        // Handle Enter key press
        searchInput.addEventListener('keypress', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                performSearch();
            }
        });

        // Handle clear button click
        if (clearButton) {
            clearButton.addEventListener('click', function(event) {
                event.preventDefault();
                window.location.href = '/discover';
            });
        }

        // Ensure the cursor can be placed anywhere in the input
        searchInput.addEventListener('click', function(event) {
            // Remove any default selection behavior
            event.target.selectionStart = event.target.selectionEnd = event.target.value.length;
        });
    });
    const makeSelect = document.getElementById('make');
    const yearSelect = document.getElementById('year');
    const modelSelect = document.getElementById('model');
    const engineSelect = document.getElementById('engine');

    const savedVehiclesSelect = document.getElementById('savedVehicles');
    if (savedVehiclesSelect) {
        savedVehiclesSelect.addEventListener('change', function() {
            const selectedValue = this.value;
            
            if (selectedValue) {
                try {
                    const [year, make, model, engine] = selectedValue.split('|');
        
                    if (make) {
                        makeSelect.value = make;
                        updateDropdowns('year', make);
                        
                        setTimeout(() => {
                            yearSelect.value = year;
                            yearSelect.disabled = false;
                            updateDropdowns('model', make, year);
                            
                            setTimeout(() => {
                                modelSelect.value = model;
                                modelSelect.disabled = false;
                                updateDropdowns('engine', make, year, model);
                                
                                setTimeout(() => {
                                    engineSelect.value = engine;
                                    engineSelect.disabled = false;
                                }, 100);
                            }, 100);
                        }, 100);
                    }
                } catch (error) {
                    console.error('Error processing saved vehicle selection:', error);
                    resetVehicleForm();
                }
            } else {
                resetVehicleForm();
            }
        });
    }

    function resetVehicleForm() {

        makeSelect.value = '';
        yearSelect.innerHTML = '<option value="">Select Year</option>';
        modelSelect.innerHTML = '<option value="">Select Model</option>';
        engineSelect.innerHTML = '<option value="">Select Engine</option>';
        yearSelect.disabled = true;
        modelSelect.disabled = true;
        engineSelect.disabled = true;
    }
    </script>

    {{#if error}}
        <div class="alert alert-danger">{{error}}</div>
    {{else}}
        <div class="row row-cols-1 row-cols-md-3 mb-3 text-center">
            {{#each products}}
                <div class="card m-3 rounded-3 shadow-sm" style="width: 25rem;">
                    <div class="card-header">
                        <h1 class="card-title">{{this.brand}}</h1>
                    </div>
                    <div class="card-body">
                        <div class="product-image-container mb-3">
                            <img src="{{#if this.thumbimg}}{{this.thumbimg}}{{else}}/img/notfound.png{{/if}}"
                                class="img-fluid product-thumbnail" alt="{{this.name}} - {{this.brand}}">
                        </div>
                        <table class="table table-sm product-details-table">
                            <tbody>
                                <tr>
                                    <th scope="row">Part #</th>
                                    <td>{{this.partnumber}}</td>
                                </tr>
                                <tr>
                                    <th scope="row">Description:</th>
                                    <td>{{this.description}}<br>
                                        {{#if this.pack}}{{this.pack}}{{/if}}<br>
                                        {{#if this.fits}}{{this.fits}}{{/if}}
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">Fits:</th>
                                    <td>
                                        {{#each this.compatible_vehicles}}
                                            {{this}}<br>
                                        {{/each}}
                                    </td>
                                </tr>
                                <tr>
                                    <th scope="row">Price:</th>
                                    <td>${{this.price}} @ {{this.vendor_name}}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="card-body text-end">
                        <button type="button" class="btn btn-primary add-to-cart-btn" data-product-id="{{this.id}}" data-vendor-id="{{this.vendor_id}}">
                        Add to cart
                        </button>
                    </div>
                </div>
            {{/each}}
        </div>

        {{#if pagination}}
            <div class="pagination-container">
                <ul class="pagination">
                    {{!-- First Page --}}
                    {{#if pagination.hasPreviousPage}}
                        <li class="page-item">
                            <a class="page-link" href="/discover?page=1{{#if searchQuery}}&query={{searchQuery}}{{/if}}"
                                aria-label="First">
                                Â« First
                            </a>
                        </li>
                    {{else}}
                        <li class="page-item disabled">
                            <span class="page-link" aria-hidden="true">Â« First</span>
                        </li>
                    {{/if}}

                    {{!-- Previous --}}
                    {{#if pagination.hasPreviousPage}}
                        <li class="page-item">
                            <a class="page-link" href="/discover?page={{pagination.previousPage}}{{#if searchQuery}}&query={{searchQuery}}{{/if}}"
                                aria-label="Previous">
                                Previous
                            </a>
                        </li>
                    {{else}}
                        <li class="page-item disabled">
                            <span class="page-link" aria-hidden="true">Previous</span>
                        </li>
                    {{/if}}

                    {{!-- Current Page Indicator --}}
                    <li class="page-item disabled">
                        <span class="page-link">Page {{pagination.currentPage}} of {{pagination.totalPages}}</span>
                    </li>

                    {{!-- Next --}}
                    {{#if pagination.hasNextPage}}
                        <li class="page-item">
                            <a class="page-link" href="/discover?page={{pagination.nextPage}}{{#if searchQuery}}&query={{searchQuery}}{{/if}}" 
                                aria-label="Next">
                                Next
                            </a>
                        </li>
                    {{else}}
                        <li class="page-item disabled">
                            <span class="page-link" aria-hidden="true">Next</span>
                        </li>
                    {{/if}}

                    {{!-- Last Page --}}
                    {{#if pagination.hasNextPage}}
                        <li class="page-item">
                            <a class="page-link" href="/discover?page={{pagination.totalPages}}{{#if searchQuery}}&query={{searchQuery}}{{/if}}" 
                                aria-label="Last">
                                Last Â»
                            </a>
                        </li>
                    {{else}}
                        <li class="page-item disabled">
                            <span class="page-link" aria-hidden="true">Last Â»</span>
                        </li>
                    {{/if}}
                </ul>
            </div>
        {{/if}}
    {{/if}}

    <div class="modal fade" id="itemAddedModal" tabindex="-1" aria-labelledby="itemAddedModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="itemAddedModalLabel">Item Added to Cart</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center pt-0">
                <div class="success-icon">âœ“</div>
                <p class="text-muted" id="itemDetails">Your item has been added to your shopping cart.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Continue Shopping</button>
                <button type="button" class="btn btn-success" onclick="goToCart()">Go to Cart</button>
            </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
            
            function showItemAddedAlert(itemName = "Item", isAlreadyInCart = false) {
                const modalTitle = document.getElementById('itemAddedModalLabel');
                const itemDetails = document.getElementById('itemDetails');
                
                if (isAlreadyInCart) {
                    modalTitle.textContent = "Item Already in Cart";
                    itemDetails.textContent = `${itemName} is already in your shopping cart.`;
                } else {
                    modalTitle.textContent = "Item Added to Cart";
                    itemDetails.textContent = `${itemName} has been added to your shopping cart.`;
                }
                
                const modal = new bootstrap.Modal(document.getElementById('itemAddedModal'));
                modal.show();
            }
            
            function goToCart() {
                window.location.href = "/cart";
            }
            
            window.goToCart = goToCart;
            
            addToCartButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const productId = this.dataset.productId;
                    const vendorId = this.dataset.vendorId;
                    const card = this.closest('.card');
                    const productName = card ? card.querySelector('.card-title').textContent : "Item";
                    
                    fetch('/cart/add', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ product_id: productId, vendor_id: vendorId })
                    })
                    .then(response => {
                        if (response.status === 400) {
                            // Item is already in cart
                            return response.json().then(data => {
                                if (data.error === 'Product already in cart') {
                                    showItemAddedAlert(productName, true);
                                    return { success: false, handled: true };
                                }
                                return { success: false, error: data.error };
                            });
                        } else {
                            return response.json();
                        }
                    })
                    .then(data => {
                        if (data.handled) {
                            // Already handled by the "item already in cart" case
                            return;
                        }
                        if (data.success) {
                            // Successfully added to cart
                            showItemAddedAlert(productName, false);
                        } else {
                            if (data.error === 'Not authenticated') {
                                // Redirect to login page if not authenticated
                                window.location.href = '/login';
                            } else {
                                alert('Error adding item to cart: ' + data.error);
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while adding the item to the cart.');
                    });
                });
            });
        });
    </script>
</main>
